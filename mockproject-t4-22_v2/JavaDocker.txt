- Pull and start/run a container
docker run -dp 8083:8080 \
--name springboot-web-phone-sale-container \
-v "$(pwd):/app" \
nhh0507/springboot-docker:v1.0.0



test

curl --request GET \
--url http://localhost:8081/api/users \
--header 'content-type: application/json'


curl --request GET \
--url http://localhost:8081/api/users \
--header 'content-type: application/json'



Update code & restart
docker restart springboot-docker-container

Now create another MYSQL container and put this within the same nework with springboot-docker-container

docker network create springboot-app-network

docker run --rm -d \
-v mysql-springboot-data:/var/lib/mysql \
-v mysql-springboot-config-deamond:/etc/mysql/conf.d \
--name mysql-springboot-container \
-p 3310:3306 \
-e MYSQL_USER=sa \
-e MYSQL_PASSWORD=admin \
-e MYSQL_ROOT_PASSWORD=root \
-e MYSQL_DATABASE=Mockproject \
--network springboot-app-network \
mysql:8.0.28

Access mysql's command line inside mysql-springboot-container:
docker exec -ti mysql-springboot-container mysql -u root -p

Noew replace all command to create container into a .yml build
=> use Docker Compose
Build Docker Compose file:
#Remove old containers
docker rm -f mysql-springboot-container springboot-docker-container

sudo docker-compose -f docker-compose.dev.yml up --build